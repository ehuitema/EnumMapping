// This file was generated by Mendix Business Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package enummapping.actions;

import enummapping.proxies.EnumMap;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.meta.IMetaEnumValue;
import com.mendix.systemwideinterfaces.core.meta.IMetaObject;
import com.mendix.systemwideinterfaces.core.meta.IMetaPrimitive;

/**
 * Converts a string value to a real enumeration value.
 * The enumeration must be placed in the EnumMap entity as attribute with the same name as the enumeration.
 * 
 * Params:
 * - EnumerationName: name of the enumeration attribute in the EnumMap entity
 * - EnumerationValue: the string value is must be converted to an enum value
 * 
 * Return:
 * Returns an EnumMap entity with the attribute (as specified in the EnumerationName param) filled with the enumeration value.
 * 
 */
public class ConvertStringToEnum extends CustomJavaAction<IMendixObject>
{
	private String EnumerationName;
	private String EnumerationValue;

	public ConvertStringToEnum(IContext context, String EnumerationName, String EnumerationValue)
	{
		super(context);
		this.EnumerationName = EnumerationName;
		this.EnumerationValue = EnumerationValue;
	}

	@Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		IMetaObject metaEnumMap = Core.getMetaObject(EnumMap.entityName);
		IMetaPrimitive metaPrim = metaEnumMap.getMetaPrimitive(EnumerationName);
		if(metaPrim != null) {
			if(EnumerationValue == null || EnumerationValue.isEmpty()) {
				IMendixObject newEnumMap = new EnumMap(getContext()).getMendixObject();
				newEnumMap.setValue(getContext(), EnumerationName, null);
				return newEnumMap;				
			}
			for(IMetaEnumValue metaEnumValue : metaPrim.getEnumValues()) {
				if(metaEnumValue.getIdentifier().equals(EnumerationValue) || 
						Core.getInternationalizedString(getContext(), metaEnumValue.getI18NCaptionKey(), new Object[] {}).equals(EnumerationValue)) {
					IMendixObject newEnumMap = new EnumMap(getContext()).getMendixObject();
					newEnumMap.setValue(getContext(), EnumerationName, metaEnumValue.toString());
					return newEnumMap;
				}
			}
		}
		throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Cannot convert String to Enum value for: " + this.EnumerationName + " with value: " + this.EnumerationValue);
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "ConvertStringToEnum";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
